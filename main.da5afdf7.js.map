{"version":3,"sources":["scripts/main.js"],"names":["Cramer","x1","y1","x2","y2","x3","y3","x4","y4","getA","getC","getDelta","x","getDelta1","y","getDelta2","canvas","document","getElementById","ctx","getContext","startXY","isStart","coordsAllLines","allPointsCross","canvasWidth","canvasHeight","onclick","event","moveTo","offsetX","offsetY","endXY","push","findAllCroosPoints","drawPoint","oncontextmenu","clearRect","drawLine","onmousemove","dynamicPoints","lineTo","stroke","beginPath","i","length","cramer","temp","getResolve","map","point","fillStyle","arc","fill","line","j","resolve","button","animation","quantity","pct","window","requestAnimationFrame","animate","startX","startY","endX","endY","xMiddle","yMiddle","dx","dy"],"mappings":"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","file":"main.da5afdf7.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nclass Cramer {\n  constructor(x1, y1, x2, y2, x3, y3, x4, y4) {\n    this.x1 = x1;\n    this.y1 = y1;\n    this.x2 = x2;\n    this.y2 = y2;\n    this.x3 = x3;\n    this.y3 = y3;\n    this.x4 = x4;\n    this.y4 = y4;\n  }\n\n  getA(x1, y1, x2, y2) {\n    if (x2 - x1) {\n      return (y1 - y2) / (x2 - x1);\n    }\n\n    return false;\n  };\n\n  getC(x1, y1, x2, y2) {\n    if (x2 - x1) {\n      return ((y2 - y1) / (x2 - x1)) * x1 - y1;\n    }\n\n    return false;\n  };\n\n  getDelta() {\n    return this.getA(this.x1, this.y1, this.x2, this.y2)\n    - this.getA(this.x3, this.y3, this.x4, this.y4);\n  }\n\n  getDelta1() {\n    return this.getC(this.x1, this.y1, this.x2, this.y2)\n    - this.getC(this.x3, this.y3, this.x4, this.y4);\n  }\n\n  getDelta2() {\n    return this.getA(this.x1, this.y1, this.x2, this.y2)\n    * this.getC(this.x3, this.y3, this.x4, this.y4)\n    - this.getA(this.x3, this.y3, this.x4, this.y4)\n    * this.getC(this.x1, this.y1, this.x2, this.y2);\n  }\n\n  getResolve() {\n    if (this.getDelta()) {\n      return {\n        x: (this.getDelta1() / this.getDelta()) * -1,\n        y: (this.getDelta2() / this.getDelta()) * -1,\n      };\n    }\n\n    return false;\n  }\n}\n\nconst canvas = document.getElementById('canvas');\nconst ctx = canvas.getContext('2d');\nlet startXY = {};\nlet isStart = true;\nconst coordsAllLines = [];\nconst allPointsCross = [];\nconst canvasWidth = 750;\nconst canvasHeight = 450;\n\ncanvas.onclick = (event) => {\n  if (isStart) {\n    ctx.moveTo(event.offsetX, event.offsetY);\n\n    startXY = {\n      x: event.offsetX,\n      y: event.offsetY,\n    };\n\n    isStart = false;\n  } else {\n    const endXY = {\n      x: event.offsetX,\n      y: event.offsetY,\n    };\n\n    coordsAllLines.push([startXY, endXY]);\n    isStart = true;\n    findAllCroosPoints();\n    drawPoint();\n  }\n};\n\ncanvas.oncontextmenu = (event) => {\n  ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n  drawLine();\n  drawPoint();\n  isStart = true;\n};\n\ncanvas.onmousemove = (event) => {\n  const dynamicPoints = [];\n\n  if (!isStart) {\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n    ctx.moveTo(startXY.x, startXY.y);\n    ctx.lineTo(event.offsetX, event.offsetY);\n    ctx.stroke();\n    ctx.beginPath();\n    drawLine();\n    drawPoint();\n\n    for (let i = 0; i < coordsAllLines.length; i++) {\n      const cramer = new Cramer(\n        startXY.x,\n        startXY.y,\n        event.offsetX,\n        event.offsetY,\n        coordsAllLines[i][0].x,\n        coordsAllLines[i][0].y,\n        coordsAllLines[i][1].x,\n        coordsAllLines[i][1].y,\n      );\n\n      const temp = cramer.getResolve();\n\n      if (((temp.x >= coordsAllLines[i][0].x\n        && temp.x <= coordsAllLines[i][1].x)\n      || (temp.x <= coordsAllLines[i][0].x\n        && temp.x >= coordsAllLines[i][1].x))\n\n        && ((temp.x >= startXY.x\n          && temp.x <= event.offsetX)\n        || (temp.x <= startXY.x\n          && temp.x >= event.offsetX))) {\n        dynamicPoints.push(temp);\n      }\n    }\n\n    dynamicPoints.map(point => {\n      ctx.beginPath();\n      ctx.fillStyle = 'red';\n      ctx.arc(point.x, point.y, 3, 0, 360, false);\n      ctx.stroke();\n      ctx.fill();\n    });\n  }\n};\n\nconst drawLine = () => {\n  coordsAllLines.map(line => {\n    ctx.moveTo(line[0].x, line[0].y);\n    ctx.lineTo(line[1].x, line[1].y);\n  });\n\n  ctx.stroke();\n};\n\nconst drawPoint = () => {\n  allPointsCross.map(point => {\n    ctx.beginPath();\n    ctx.fillStyle = 'red';\n    ctx.arc(point.x, point.y, 3, 0, 360, false);\n    ctx.stroke();\n    ctx.fill();\n  });\n};\n\nconst findAllCroosPoints = () => {\n  if (coordsAllLines.length > 1) {\n    for (let i = 0; i < coordsAllLines.length; i++) {\n      for (let j = 0; j < coordsAllLines.length; j++) {\n        const cramer = new Cramer(\n          coordsAllLines[i][0].x,\n          coordsAllLines[i][0].y,\n          coordsAllLines[i][1].x,\n          coordsAllLines[i][1].y,\n          coordsAllLines[j][0].x,\n          coordsAllLines[j][0].y,\n          coordsAllLines[j][1].x,\n          coordsAllLines[j][1].y);\n\n        const resolve = cramer.getResolve();\n\n        if (resolve) {\n          if (((resolve.x >= coordsAllLines[i][0].x\n            && resolve.x <= coordsAllLines[i][1].x)\n          || (resolve.x <= coordsAllLines[i][0].x\n            && resolve.x >= coordsAllLines[i][1].x))\n\n            && ((resolve.x >= coordsAllLines[j][0].x\n              && resolve.x <= coordsAllLines[j][1].x)\n            || (resolve.x <= coordsAllLines[j][0].x\n              && resolve.x >= coordsAllLines[j][1].x))) {\n            allPointsCross.push(resolve);\n          }\n        }\n      }\n    }\n  }\n};\n\nconst button = document.getElementById('btn');\n\nconst animation = () => {\n  const quantity = 200;\n  let pct = 0;\n\n  window.requestAnimationFrame(animate);\n\n  function animate() {\n    if (++pct > quantity) {\n      return;\n    }\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    coordsAllLines.map(line => {\n      const startX = line[0].x;\n      const startY = line[0].y;\n      const endX = line[1].x;\n      const endY = line[1].y;\n      const xMiddle = (startX + endX) / 2;\n      const yMiddle = (startY + endY) / 2;\n      const dx = endX - startX;\n      const dy = endY - startY;\n      const x = startX + dx * pct / (2 * quantity);\n      const y = startY + dy * pct / (2 * quantity);\n\n      ctx.beginPath();\n      ctx.moveTo(x, y);\n      ctx.lineTo(xMiddle, yMiddle);\n\n      ctx.moveTo(\n        endX - dx * pct / (2 * quantity),\n        endY - dy * pct / (2 * quantity)\n      );\n      ctx.lineTo(xMiddle, yMiddle);\n      ctx.stroke();\n      ctx.beginPath();\n      ctx.fillStyle = 'blue';\n      ctx.arc(xMiddle, yMiddle, 5, 0, 360, false);\n      ctx.fill();\n    });\n\n    window.requestAnimationFrame(animate);\n  };\n};\n\nbutton.onclick = () => {\n  animation();\n};\n"]}